[{"/Users/vladdenisov/projects/web/src/index.tsx":"1","/Users/vladdenisov/projects/web/src/reportWebVitals.ts":"2","/Users/vladdenisov/projects/web/src/App.tsx":"3","/Users/vladdenisov/projects/web/src/Pages/Login/Login.tsx":"4","/Users/vladdenisov/projects/web/src/Pages/Home/Home.tsx":"5","/Users/vladdenisov/projects/web/src/config.ts":"6","/Users/vladdenisov/projects/web/src/Pages/Chat/Chat.tsx":"7","/Users/vladdenisov/projects/web/src/Components/Preloader/Preloader.tsx":"8","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Sidebar.tsx":"9","/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/Dialog.tsx":"10","/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/Message.tsx":"11","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Header/Header.tsx":"12","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/ChatList/ChatList.tsx":"13","/Users/vladdenisov/projects/web/src/Utils/decrypt.ts":"14","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/ChatList/ChatCard.tsx":"15","/Users/vladdenisov/projects/web/src/Components/UserPicture/UserPicture.tsx":"16","/Users/vladdenisov/projects/web/src/Utils/keysUtils.ts":"17","/Users/vladdenisov/projects/web/src/Utils/formatDate.ts":"18","/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/MessageInput.tsx":"19","/Users/vladdenisov/projects/web/src/Utils/encrypt.ts":"20","/Users/vladdenisov/projects/web/src/Contexts/UserContext.tsx":"21","/Users/vladdenisov/projects/web/src/Contexts/DialogContext.tsx":"22","/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/DialogHeader.tsx":"23","/Users/vladdenisov/projects/web/src/Pages/Register/Register.tsx":"24","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Search/Search.tsx":"25","/Users/vladdenisov/projects/web/src/Contexts/SearchReducer.tsx":"26"},{"size":937,"mtime":1617701176262,"results":"27","hashOfConfig":"28"},{"size":425,"mtime":1613728181456,"results":"29","hashOfConfig":"28"},{"size":158,"mtime":1613728181447,"results":"30","hashOfConfig":"28"},{"size":3826,"mtime":1618824986932,"results":"31","hashOfConfig":"28"},{"size":1081,"mtime":1615581765580,"results":"32","hashOfConfig":"28"},{"size":129,"mtime":1618825172800,"results":"33","hashOfConfig":"28"},{"size":2575,"mtime":1617701127155,"results":"34","hashOfConfig":"28"},{"size":265,"mtime":1613728181447,"results":"35","hashOfConfig":"28"},{"size":594,"mtime":1618761772795,"results":"36","hashOfConfig":"28"},{"size":4965,"mtime":1615975459550,"results":"37","hashOfConfig":"28"},{"size":3006,"mtime":1615836084663,"results":"38","hashOfConfig":"28"},{"size":473,"mtime":1613728181450,"results":"39","hashOfConfig":"28"},{"size":1044,"mtime":1618823651273,"results":"40","hashOfConfig":"28"},{"size":976,"mtime":1615581909531,"results":"41","hashOfConfig":"28"},{"size":2287,"mtime":1618824386170,"results":"42","hashOfConfig":"28"},{"size":625,"mtime":1613728181448,"results":"43","hashOfConfig":"28"},{"size":442,"mtime":1613728181452,"results":"44","hashOfConfig":"28"},{"size":1575,"mtime":1615754156881,"results":"45","hashOfConfig":"28"},{"size":1383,"mtime":1615754661758,"results":"46","hashOfConfig":"28"},{"size":723,"mtime":1613728181452,"results":"47","hashOfConfig":"28"},{"size":1934,"mtime":1618823815222,"results":"48","hashOfConfig":"28"},{"size":2635,"mtime":1615975086322,"results":"49","hashOfConfig":"28"},{"size":188,"mtime":1615913135532,"results":"50","hashOfConfig":"28"},{"size":5775,"mtime":1618824601232,"results":"51","hashOfConfig":"28"},{"size":1805,"mtime":1618824116907,"results":"52","hashOfConfig":"28"},{"size":1967,"mtime":1618824046933,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},"kje09f",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"57"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"57"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/vladdenisov/projects/web/src/index.tsx",["110"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// @ts-ignore\nimport {BrowserRouter, Route, Link} from 'react-router-dom';\nimport Login from './Pages/Login/Login';\nimport Home from './Pages/Home/Home';\nimport Register from './Pages/Register/Register';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App>\n        <Route exact path='/login' component={Login}/>\n        <Route exact path='/register' component={Register}/>\n        <Route path={['/:id', '/']} exact component={Home} />\n      </App>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["111","112"],"/Users/vladdenisov/projects/web/src/reportWebVitals.ts",[],"/Users/vladdenisov/projects/web/src/App.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Login/Login.tsx",["113"],"/Users/vladdenisov/projects/web/src/Pages/Home/Home.tsx",[],"/Users/vladdenisov/projects/web/src/config.ts",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Chat.tsx",[],"/Users/vladdenisov/projects/web/src/Components/Preloader/Preloader.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Sidebar.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/Dialog.tsx",["114","115","116","117"],"import { nanoid } from \"nanoid\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport Preloader from \"../../../Components/Preloader/Preloader\";\nimport Message from \"./Message\";\nimport './Dialog.scss'\nimport MessageInput from \"./MessageInput\";\nimport { useParams } from \"react-router\";\nimport { useDialog } from \"../../../Contexts/DialogContext\";\nimport DialogHeader from \"./DialogHeader\";\nimport { useUser } from \"../../../Contexts/UserContext\";\n\nconst Dialog: React.FunctionComponent<{socket: WebSocket}> = (props) => {\n  const [isLoading, setLoading] = useState(true)\n  const params: {id: string} = useParams()\n  const page = useRef(0)\n  const prevScrollHeight = useRef(0)\n  const [isRequested, setRequested] = useState(false)\n  const dialog = useDialog()\n  const user = useUser()\n  const [msg, setMsg] = useState<Array<JSX.Element>>([])\n  const messagesDiv = useRef<HTMLDivElement>(null)\n  const callbacks = useRef<Array<Function>>([])\n  const subcribeToScroll = (callback: Function) => {\n    callbacks.current.push(callback)\n    return () => callbacks.current.filter(x => x !== callback)\n  }\n  const scrollCallback = (e: any) => {\n    callbacks.current.forEach(callback => {\n      callback(e)\n    });\n    if (e.target.scrollTop === 0) {\n      if (!isRequested) {\n        page.current = page.current + 1\n        prevScrollHeight.current = messagesDiv.current? messagesDiv.current.scrollHeight : 0\n        setRequested(true)\n        props.socket.send(\n          JSON.stringify({\n            action: 'get_messages',\n            chat_id: params.id,\n            pg: page.current,\n            jwt: localStorage.getItem('token'),\n          })\n        )\n      }\n    }\n  }\n  const callback = useCallback((ev: MessageEvent<any>) => {\n    const response = JSON.parse(ev.data)\n    if (response.action === 'get_messages') {\n      if (page.current === 0) {\n        dialog.dispatch({type: 'CHANGE_DIALOG'})\n        callbacks.current = []\n        dialog.dispatch({type: 'CHANGE_KEY', payload: response.pub_key})\n        dialog.dispatch({type: 'ADD_MESSAGE', payload: response.messages})\n      }\n      else {\n        if (response.messages[0]) {\n          dialog.dispatch({type: 'ADD_MORE_MESSAGES', payload: response.messages})\n          setRequested(false)\n        } \n      }\n      setLoading(false)\n    }\n    if (response.action === 'new_message') {\n      if (response.data.message.chat_id === params.id){\n        console.log(response.data.message.chat_id, params.id)\n        dialog.dispatch({type: 'ADD_MESSAGE', payload: [{\n          content: response.data.message.content,\n          pub_key: dialog.state.pub_key,\n          date: response.data.message.date,\n          fromMe: response.data.message.isMe,\n          read: response.data.message.read,\n          message_id: response.data.message.message_id\n        }]})\n      }\n    }\n    if (response.action === 'message_read_by_user') {\n      if (response.data.chat_id === params.id)\n        dialog.dispatch({type: 'SET_MESSAGE_READ_STATUS', payload: {\n          id: response.data.message_id\n        }})\n    }\n  }, [dialog.state.user_id])\n  useEffect(() => {\n    const msgComp: Array<JSX.Element> = []\n    dialog.state.messages.forEach((m: {\n      content: string,\n      fromMe: boolean,\n      date: Date,\n      read: boolean,\n      message_id: string\n  }) => {\n      return msgComp.push(<Message socket={props.socket} id={m.message_id} subscribeToScroll={(c: Function) => subcribeToScroll(c)} isRead={m.read} content={m.content} pub_key={dialog.state.pub_key} key={nanoid(6)} fromMe={m.fromMe} date={m.date} />)\n  });\n    setMsg(msgComp)\n  },[dialog.state])\n  useEffect(() => {\n    if (messagesDiv.current && (messagesDiv.current.scrollTop > 1000 || page.current === 0))\n      messagesDiv.current.scrollTo(0,messagesDiv.current ? messagesDiv.current.scrollHeight : 0);\n    else if (messagesDiv.current)\n      messagesDiv.current.scrollTo(0,messagesDiv.current ? messagesDiv.current.scrollHeight - prevScrollHeight.current : 0);\n  }, [msg])\n  useEffect(() => {\n    props.socket.addEventListener('message', callback)\n    dialog.dispatch({type: 'CHANGE_DIALOG'})\n    page.current = 0\n    setLoading(true)\n    props.socket.send(\n      JSON.stringify({\n        action: 'get_messages',\n        chat_id: params.id,\n        pg: 0,\n        jwt: localStorage.getItem('token'),\n      })\n    )\n    return () => {\n      // props.socket.removeEventListener('open', onOpenCallback)\n      props.socket.removeEventListener('message', callback)\n    }\n  }, [callback, params.id, props.socket])\n  if (!params.id) {\n    return <div></div>\n  }\n  if (isLoading) return <div className={'preloader'}><Preloader /></div>\n  return <>\n    <div className={'chat_dialog'}>\n      <DialogHeader socket={props.socket} />\n      <div className={'chat_dialog__messages'} onScroll={(e) => scrollCallback(e)} ref={messagesDiv}>{msg}</div>\n      <MessageInput socket={props.socket} chat_id={params.id}/>\n    </div>\n  </>\n}\nexport default Dialog","/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/Message.tsx",["118"],"import React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { decryptMessage } from \"../../../Utils/decrypt\"\nimport { formatTime } from '../../../Utils/formatDate'\nimport TimeAgo from 'timeago-react';\nimport { useParams } from \"react-router\";\nconst Message: React.FunctionComponent<{\n  content: string\n  pub_key: string\n  date: Date\n  fromMe: boolean\n  isRead: boolean\n  id: string\n  socket: WebSocket\n  subscribeToScroll: Function\n}> = (props) => {\n  let content:string = useMemo(() => {\n    try {\n      return decryptMessage(localStorage.getItem('key'), props.content, props.pub_key).text\n    } catch (error) {\n      console.log({error, props})\n      return ''\n    }\n  }, [props]);\n  const [isRead, setRead] = useState(props.isRead)\n  const messageRef = useRef<HTMLDivElement>(null)\n  const isActionSent = useRef(false)\n  const params: {id: string} = useParams()\n  const scrollCallback = () => {\n    if (isRead || props.fromMe || isActionSent.current) return\n    const rect = messageRef.current?.getBoundingClientRect()\n    if (rect) {\n      if (rect.top > 0) {\n        console.log(props.id)\n          props.socket.send(JSON.stringify({\n            action: 'mark_as_read',\n            chatId: params.id,\n            messageId: props.id,\n            token: localStorage.getItem('token')\n          }))\n          isActionSent.current = true\n          console.log(content)\n          setRead(true)\n      }\n    }\n  }\n  useEffect(() => {\n    if (!isRead && !props.fromMe) {\n        const a = props.subscribeToScroll(scrollCallback)\n        return a()\n    }\n    if (!isRead && props.fromMe) {\n      props.socket.addEventListener('message', (ev) => {\n        const response = JSON.parse(ev.data)\n        if (response.action === 'message_read_by_user') {\n          if (response.data.chat_id === params.id && response.data.message_id === props.id){\n            setRead(true)\n          }\n        }\n      })\n    }\n  }, [isRead])\n  return <>\n    <div className={`chat_dialog__messages-message ${props.fromMe ? 'fromMe' : 'toMe'}`} ref={messageRef}>\n      <div className={`chat_dialog__messages-message_top ${props.fromMe ? 'fromMe' : 'toMe'}`} >\n        <div className={`chat_dialog__messages-message_top-bubble ${props.fromMe ? 'fromMe' : 'toMe'}`}>\n          {content}\n        </div>\n        <div className={`chat_dialog__messages-message_top-context`}>\n          <span className=\"material-icons\">\n            more_horiz\n          </span>\n        </div>\n        {\n          props.fromMe ? (<div className={`chat_dialog__messages-message_top-status`}>\n          <span className=\"material-icons\">\n            {isRead ? 'done_all' :'done'}\n          </span>\n        </div>) : ''\n        }\n        \n      </div>\n      <div className={`chat_dialog__messages-message_bottom ${props.fromMe ? 'fromMe' : 'toMe'}`}>\n      {formatTime(props.date) ? formatTime(props.date) :<TimeAgo\n        datetime={props.date}\n        opts={{minInterval: 10}}\n      />}\n      </div>\n    </div>\n  </>\n}\n\nexport default Message","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Header/Header.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/ChatList/ChatList.tsx",[],"/Users/vladdenisov/projects/web/src/Utils/decrypt.ts",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/ChatList/ChatCard.tsx",[],"/Users/vladdenisov/projects/web/src/Components/UserPicture/UserPicture.tsx",[],"/Users/vladdenisov/projects/web/src/Utils/keysUtils.ts",[],"/Users/vladdenisov/projects/web/src/Utils/formatDate.ts",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/MessageInput.tsx",[],"/Users/vladdenisov/projects/web/src/Utils/encrypt.ts",[],"/Users/vladdenisov/projects/web/src/Contexts/UserContext.tsx",[],"/Users/vladdenisov/projects/web/src/Contexts/DialogContext.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/DialogHeader.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Register/Register.tsx",["119"],"/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Search/Search.tsx",["120"],"/Users/vladdenisov/projects/web/src/Contexts/SearchReducer.tsx",[],{"ruleId":"121","severity":1,"message":"122","line":8,"column":31,"nodeType":"123","messageId":"124","endLine":8,"endColumn":35},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"121","severity":1,"message":"129","line":6,"column":10,"nodeType":"123","messageId":"124","endLine":6,"endColumn":16},{"ruleId":"121","severity":1,"message":"130","line":19,"column":9,"nodeType":"123","messageId":"124","endLine":19,"endColumn":13},{"ruleId":"131","severity":1,"message":"132","line":83,"column":6,"nodeType":"133","endLine":83,"endColumn":28,"suggestions":"134"},{"ruleId":"131","severity":1,"message":"135","line":96,"column":5,"nodeType":"133","endLine":96,"endColumn":19,"suggestions":"136"},{"ruleId":"131","severity":1,"message":"137","line":120,"column":6,"nodeType":"133","endLine":120,"endColumn":41,"suggestions":"138"},{"ruleId":"131","severity":1,"message":"139","line":61,"column":6,"nodeType":"133","endLine":61,"endColumn":14,"suggestions":"140"},{"ruleId":"121","severity":1,"message":"141","line":9,"column":15,"nodeType":"123","messageId":"124","endLine":9,"endColumn":22},{"ruleId":"121","severity":1,"message":"142","line":3,"column":10,"nodeType":"123","messageId":"124","endLine":3,"endColumn":17},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["143"],"no-negated-in-lhs",["144"],"'nanoid' is defined but never used.","'user' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback has missing dependencies: 'dialog' and 'params.id'. Either include them or remove the dependency array.","ArrayExpression",["145"],"React Hook useEffect has a missing dependency: 'props.socket'. Either include it or remove the dependency array.",["146"],"React Hook useEffect has a missing dependency: 'dialog'. Either include it or remove the dependency array.",["147"],"React Hook useEffect has missing dependencies: 'params.id', 'props', and 'scrollCallback'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["148"],"'setKeys' is assigned a value but never used.","'useUser' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},"Update the dependencies array to be: [dialog, params.id]",{"range":"157","text":"158"},"Update the dependencies array to be: [dialog.state, props.socket]",{"range":"159","text":"160"},"Update the dependencies array to be: [callback, dialog, params.id, props.socket]",{"range":"161","text":"162"},"Update the dependencies array to be: [isRead, params.id, props, scrollCallback]",{"range":"163","text":"164"},[3074,3096],"[dialog, params.id]",[3602,3616],"[dialog.state, props.socket]",[4498,4533],"[callback, dialog, params.id, props.socket]",[1924,1932],"[isRead, params.id, props, scrollCallback]"]