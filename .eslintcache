[{"/Users/vladdenisov/projects/web/src/index.tsx":"1","/Users/vladdenisov/projects/web/src/reportWebVitals.ts":"2","/Users/vladdenisov/projects/web/src/App.tsx":"3","/Users/vladdenisov/projects/web/src/Pages/Login/Login.tsx":"4","/Users/vladdenisov/projects/web/src/Pages/Home/Home.tsx":"5","/Users/vladdenisov/projects/web/src/config.ts":"6","/Users/vladdenisov/projects/web/src/Pages/Chat/Chat.tsx":"7","/Users/vladdenisov/projects/web/src/Components/Preloader/Preloader.tsx":"8","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Sidebar.tsx":"9","/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/Dialog.tsx":"10","/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/Message.tsx":"11","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Header/Header.tsx":"12","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/ChatList/ChatList.tsx":"13","/Users/vladdenisov/projects/web/src/Utils/decrypt.ts":"14","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/ChatList/ChatCard.tsx":"15","/Users/vladdenisov/projects/web/src/Components/UserPicture/UserPicture.tsx":"16","/Users/vladdenisov/projects/web/src/Utils/keysUtils.ts":"17","/Users/vladdenisov/projects/web/src/Utils/formatDate.ts":"18","/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/MessageInput.tsx":"19","/Users/vladdenisov/projects/web/src/Utils/encrypt.ts":"20","/Users/vladdenisov/projects/web/src/Contexts/UserContext.tsx":"21","/Users/vladdenisov/projects/web/src/Contexts/DialogContext.tsx":"22","/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/DialogHeader.tsx":"23","/Users/vladdenisov/projects/web/src/Pages/Register/Register.tsx":"24","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Search/Search.tsx":"25","/Users/vladdenisov/projects/web/src/Contexts/SearchReducer.tsx":"26","/Users/vladdenisov/projects/web/src/Contexts/ScreenContext.tsx":"27"},{"size":1053,"mtime":1618846149490,"results":"28","hashOfConfig":"29"},{"size":425,"mtime":1613728181456,"results":"30","hashOfConfig":"29"},{"size":590,"mtime":1619430986984,"results":"31","hashOfConfig":"29"},{"size":3826,"mtime":1618824986932,"results":"32","hashOfConfig":"29"},{"size":1081,"mtime":1615581765580,"results":"33","hashOfConfig":"29"},{"size":117,"mtime":1619282106000,"results":"34","hashOfConfig":"29"},{"size":2575,"mtime":1617701127155,"results":"35","hashOfConfig":"29"},{"size":265,"mtime":1613728181447,"results":"36","hashOfConfig":"29"},{"size":1047,"mtime":1619638186811,"results":"37","hashOfConfig":"29"},{"size":4965,"mtime":1615975459550,"results":"38","hashOfConfig":"29"},{"size":3069,"mtime":1618918749902,"results":"39","hashOfConfig":"29"},{"size":665,"mtime":1619266339067,"results":"40","hashOfConfig":"29"},{"size":1044,"mtime":1618823651273,"results":"41","hashOfConfig":"29"},{"size":976,"mtime":1615581909531,"results":"42","hashOfConfig":"29"},{"size":2287,"mtime":1618824386170,"results":"43","hashOfConfig":"29"},{"size":626,"mtime":1619266314678,"results":"44","hashOfConfig":"29"},{"size":442,"mtime":1613728181452,"results":"45","hashOfConfig":"29"},{"size":1575,"mtime":1615754156881,"results":"46","hashOfConfig":"29"},{"size":1383,"mtime":1615754661758,"results":"47","hashOfConfig":"29"},{"size":723,"mtime":1613728181452,"results":"48","hashOfConfig":"29"},{"size":1934,"mtime":1618823815222,"results":"49","hashOfConfig":"29"},{"size":2635,"mtime":1615975086322,"results":"50","hashOfConfig":"29"},{"size":188,"mtime":1615913135532,"results":"51","hashOfConfig":"29"},{"size":5775,"mtime":1618824601232,"results":"52","hashOfConfig":"29"},{"size":2198,"mtime":1619638873536,"results":"53","hashOfConfig":"29"},{"size":1967,"mtime":1618824046933,"results":"54","hashOfConfig":"29"},{"size":1372,"mtime":1618846269980,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},"kje09f",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"59"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"59"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"59"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"59"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"59"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"59"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"/Users/vladdenisov/projects/web/src/index.tsx",["118"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// @ts-ignore\nimport {BrowserRouter, Route, Link} from 'react-router-dom';\nimport Login from './Pages/Login/Login';\nimport Home from './Pages/Home/Home';\nimport Register from './Pages/Register/Register';\nimport { ScreenProvider } from './Contexts/ScreenContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ScreenProvider>\n      <BrowserRouter>\n        <App>\n          <Route exact path='/login' component={Login}/>\n          <Route exact path='/register' component={Register}/>\n          <Route path={['/:id', '/']} exact component={Home} />\n        </App>\n      </BrowserRouter>\n    </ScreenProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["119","120"],"/Users/vladdenisov/projects/web/src/reportWebVitals.ts",[],"/Users/vladdenisov/projects/web/src/App.tsx",["121"],"import React, { useEffect } from 'react';\nimport './App.css';\nimport { useScreen } from './Contexts/ScreenContext';\n\nconst App: React.FunctionComponent = ({children}) => {\n  const {dispatch} = useScreen()\n  useEffect(() => {\n    let vh = window.innerHeight * 0.01\n    document.documentElement.style.setProperty('--vh', `${vh}px`)\n    window.addEventListener('resize', (e) => {\n      dispatch({type: 'CHANGE'})\n      let vh = window.innerHeight * 0.01\n      document.documentElement.style.setProperty('--vh', `${vh}px`)\n    })\n  }, [])\n  return <>\n    {children}\n  </>\n}\nexport default App;\n","/Users/vladdenisov/projects/web/src/Pages/Login/Login.tsx",["122"],"import React, {useEffect, useState} from \"react\";\nimport {Link, Redirect} from \"react-router-dom\";\nimport './Login.scss';\nimport Preloader from \"../../Components/Preloader/Preloader\";\nimport config from '../../config'\nimport { nanoid } from \"nanoid\";\n\nconst handleLogin = (credentials: {\n  username?: string,\n  password?: string,\n  key?:string\n}, stage: number, setStage: any) => {\n  if (stage === 0) {\n  fetch(config.server_url + 'api/login', {\n    method: 'POST',\n    body: JSON.stringify(credentials),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n      .then((res) => res.json())\n      .then((res) => {\n        if (res.statusCode !== 200) {\n          alert(res.message)\n        } else {\n          localStorage.setItem('token', res.token)\n          setStage(1)\n        }\n      })\n  }\n  else {\n    if (credentials.key != null) {\n      localStorage.setItem('key', credentials.key)\n      if (localStorage.getItem('key')) setStage(2)\n    }\n  }\n}\n\nconst Login: React.FunctionComponent = () => {\n  const [credentials, setCredentials] = useState({\n    username: '',\n    password: '',\n    key: ''\n  })\n  const [stage, setStage] = useState(0)\n  const [isLoading, setLoading] = useState(true)\n  const handleChange = (e: any) => {\n    setCredentials({\n      ...credentials,\n      [e.target.name]: e.target.value\n    })\n  }\n  const firstStage = () => {\n    return (\n        <>\n          <h1>Cryptash</h1>\n          <input name={'username'} placeholder={'Username'} className={'login_main__form___username'} onChange={(e) => handleChange(e)}/>\n          <input name={'password'} type={'password'} placeholder={'Password'} className={'login_main__form___password'} onChange={(e) => handleChange(e)}/>\n          <button type={'submit'} className={'login_main__form___submit'}>Login</button>\n          <Link to={'/register'}>Create new account</Link>\n        </>\n  )\n  }\n  const secondStage = () => {\n    if (stage === 1) return (\n        <>\n          <h3>One more thing</h3>\n          <h4>Please enter your private key</h4>\n          <input type={'text'}\n                 className={'login_main__form___privatekey'}\n                 autoComplete={'off'}\n                 placeholder={'Private key'}\n                 key={localStorage.getItem('token')}\n                 onChange={(e:any) => {\n                   setCredentials({\n                     ...credentials,\n                     key: e.target.value,\n                  })}\n                 }\n          />\n          <button type={'submit'} className={'login_main__form___submit'}>Login</button>\n        </>\n    )\n    else return <Redirect to={'/'} />\n  }\n  useEffect(() => {\n    if (localStorage.getItem('token')) {\n      fetch(config.server_url + 'api/checkAuth', {\n        method: 'POST',\n        body: JSON.stringify({token: localStorage.getItem('token')}),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n          .then((res) => res.json())\n          .then((res) => {\n            if (res.statusCode === 200) {\n              setLoading(false)\n              setStage(2)\n            }\n\n          })\n    }\n    else {\n      setLoading(false)\n    }\n  }, [])\n  if (isLoading) return <Preloader />\n  return <>\n    <div className=\"login_main\">\n      <div className={'login_main__header'}>\n          <h1 className={'login_main__header___title'}>Sign in into your account</h1>\n          <h2 className={'login_main__header___undertitle'}>If you don't have account, sign up using button below</h2>\n      </div>\n      <div className={'login_main__block'}>\n        <form className={'login_main__form'} onSubmit={(e) =>{\n          e.preventDefault()\n          handleLogin(credentials, stage, setStage)\n        }}>\n          {stage ? secondStage() : firstStage()}\n        </form>\n      </div>\n    </div>\n  </>\n\n}\n\nexport default Login\n","/Users/vladdenisov/projects/web/src/Pages/Home/Home.tsx",[],"/Users/vladdenisov/projects/web/src/config.ts",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Chat.tsx",[],"/Users/vladdenisov/projects/web/src/Components/Preloader/Preloader.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Sidebar.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/Dialog.tsx",["123","124","125","126"],"import { nanoid } from \"nanoid\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport Preloader from \"../../../Components/Preloader/Preloader\";\nimport Message from \"./Message\";\nimport './Dialog.scss'\nimport MessageInput from \"./MessageInput\";\nimport { useParams } from \"react-router\";\nimport { useDialog } from \"../../../Contexts/DialogContext\";\nimport DialogHeader from \"./DialogHeader\";\nimport { useUser } from \"../../../Contexts/UserContext\";\n\nconst Dialog: React.FunctionComponent<{socket: WebSocket}> = (props) => {\n  const [isLoading, setLoading] = useState(true)\n  const params: {id: string} = useParams()\n  const page = useRef(0)\n  const prevScrollHeight = useRef(0)\n  const [isRequested, setRequested] = useState(false)\n  const dialog = useDialog()\n  const user = useUser()\n  const [msg, setMsg] = useState<Array<JSX.Element>>([])\n  const messagesDiv = useRef<HTMLDivElement>(null)\n  const callbacks = useRef<Array<Function>>([])\n  const subcribeToScroll = (callback: Function) => {\n    callbacks.current.push(callback)\n    return () => callbacks.current.filter(x => x !== callback)\n  }\n  const scrollCallback = (e: any) => {\n    callbacks.current.forEach(callback => {\n      callback(e)\n    });\n    if (e.target.scrollTop === 0) {\n      if (!isRequested) {\n        page.current = page.current + 1\n        prevScrollHeight.current = messagesDiv.current? messagesDiv.current.scrollHeight : 0\n        setRequested(true)\n        props.socket.send(\n          JSON.stringify({\n            action: 'get_messages',\n            chat_id: params.id,\n            pg: page.current,\n            jwt: localStorage.getItem('token'),\n          })\n        )\n      }\n    }\n  }\n  const callback = useCallback((ev: MessageEvent<any>) => {\n    const response = JSON.parse(ev.data)\n    if (response.action === 'get_messages') {\n      if (page.current === 0) {\n        dialog.dispatch({type: 'CHANGE_DIALOG'})\n        callbacks.current = []\n        dialog.dispatch({type: 'CHANGE_KEY', payload: response.pub_key})\n        dialog.dispatch({type: 'ADD_MESSAGE', payload: response.messages})\n      }\n      else {\n        if (response.messages[0]) {\n          dialog.dispatch({type: 'ADD_MORE_MESSAGES', payload: response.messages})\n          setRequested(false)\n        } \n      }\n      setLoading(false)\n    }\n    if (response.action === 'new_message') {\n      if (response.data.message.chat_id === params.id){\n        console.log(response.data.message.chat_id, params.id)\n        dialog.dispatch({type: 'ADD_MESSAGE', payload: [{\n          content: response.data.message.content,\n          pub_key: dialog.state.pub_key,\n          date: response.data.message.date,\n          fromMe: response.data.message.isMe,\n          read: response.data.message.read,\n          message_id: response.data.message.message_id\n        }]})\n      }\n    }\n    if (response.action === 'message_read_by_user') {\n      if (response.data.chat_id === params.id)\n        dialog.dispatch({type: 'SET_MESSAGE_READ_STATUS', payload: {\n          id: response.data.message_id\n        }})\n    }\n  }, [dialog.state.user_id])\n  useEffect(() => {\n    const msgComp: Array<JSX.Element> = []\n    dialog.state.messages.forEach((m: {\n      content: string,\n      fromMe: boolean,\n      date: Date,\n      read: boolean,\n      message_id: string\n  }) => {\n      return msgComp.push(<Message socket={props.socket} id={m.message_id} subscribeToScroll={(c: Function) => subcribeToScroll(c)} isRead={m.read} content={m.content} pub_key={dialog.state.pub_key} key={nanoid(6)} fromMe={m.fromMe} date={m.date} />)\n  });\n    setMsg(msgComp)\n  },[dialog.state])\n  useEffect(() => {\n    if (messagesDiv.current && (messagesDiv.current.scrollTop > 1000 || page.current === 0))\n      messagesDiv.current.scrollTo(0,messagesDiv.current ? messagesDiv.current.scrollHeight : 0);\n    else if (messagesDiv.current)\n      messagesDiv.current.scrollTo(0,messagesDiv.current ? messagesDiv.current.scrollHeight - prevScrollHeight.current : 0);\n  }, [msg])\n  useEffect(() => {\n    props.socket.addEventListener('message', callback)\n    dialog.dispatch({type: 'CHANGE_DIALOG'})\n    page.current = 0\n    setLoading(true)\n    props.socket.send(\n      JSON.stringify({\n        action: 'get_messages',\n        chat_id: params.id,\n        pg: 0,\n        jwt: localStorage.getItem('token'),\n      })\n    )\n    return () => {\n      // props.socket.removeEventListener('open', onOpenCallback)\n      props.socket.removeEventListener('message', callback)\n    }\n  }, [callback, params.id, props.socket])\n  if (!params.id) {\n    return <div></div>\n  }\n  if (isLoading) return <div className={'preloader'}><Preloader /></div>\n  return <>\n    <div className={'chat_dialog'}>\n      <DialogHeader socket={props.socket} />\n      <div className={'chat_dialog__messages'} onScroll={(e) => scrollCallback(e)} ref={messagesDiv}>{msg}</div>\n      <MessageInput socket={props.socket} chat_id={params.id}/>\n    </div>\n  </>\n}\nexport default Dialog","/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/Message.tsx",["127","128"],"import React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { decryptMessage } from \"../../../Utils/decrypt\"\nimport { formatTime } from '../../../Utils/formatDate'\nimport TimeAgo from 'timeago-react';\nimport { useParams } from \"react-router\";\nconst Message: React.FunctionComponent<{\n  content: string\n  pub_key: string\n  date: Date\n  fromMe: boolean\n  isRead: boolean\n  id: string\n  socket: WebSocket\n  subscribeToScroll: Function\n}> = (props) => {\n  let content:string = useMemo(() => {\n    try {\n      return decryptMessage(localStorage.getItem('key'), props.content, props.pub_key).text\n    } catch (error) {\n      console.log({error, props})\n      return ''\n    }\n  }, [props]);\n  const [isRead, setRead] = useState(props.isRead)\n  const messageRef = useRef<HTMLDivElement>(null)\n  const isActionSent = useRef(false)\n  const params: {id: string} = useParams()\n  const scrollCallback = () => {\n    if (isRead || props.fromMe || isActionSent.current) return\n    const rect = messageRef.current?.getBoundingClientRect()\n    if (rect) {\n      if (rect.top > 0) {\n        console.log(props.id)\n          props.socket.send(JSON.stringify({\n            action: 'mark_as_read',\n            chatId: params.id,\n            messageId: props.id,\n            token: localStorage.getItem('token')\n          }))\n          isActionSent.current = true\n          console.log(content)\n          setRead(true)\n      }\n    }\n  }\n  useEffect(() => {\n    if (!isRead && !props.fromMe) {\n        const a = props.subscribeToScroll(scrollCallback)\n        return a()\n    }\n    if (!isRead && props.fromMe) {\n      props.socket.addEventListener('message', (ev) => {\n        const response = JSON.parse(ev.data)\n        if (response.action === 'message_read_by_user') {\n          if (response.data.chat_id === params.id && response.data.message_id === props.id){\n            setRead(true)\n          }\n        }\n      })\n    }\n  }, [isRead])\n  useEffect(() => {\n    scrollCallback()\n  }, [])\n  return <>\n    <div className={`chat_dialog__messages-message ${props.fromMe ? 'fromMe' : 'toMe'}`} ref={messageRef}>\n      <div className={`chat_dialog__messages-message_top ${props.fromMe ? 'fromMe' : 'toMe'}`} >\n        <div className={`chat_dialog__messages-message_top-bubble ${props.fromMe ? 'fromMe' : 'toMe'}`}>\n          <span>{content}</span>\n        </div>\n        <div className={`chat_dialog__messages-message_top-context`}>\n          <span className=\"material-icons\">\n            more_horiz\n          </span>\n        </div>\n        {\n          props.fromMe ? (<div className={`chat_dialog__messages-message_top-status`}>\n          <span className=\"material-icons\">\n            {isRead ? 'done_all' :'done'}\n          </span>\n        </div>) : ''\n        }\n        \n      </div>\n      <div className={`chat_dialog__messages-message_bottom ${props.fromMe ? 'fromMe' : 'toMe'}`}>\n      {formatTime(props.date) ? formatTime(props.date) :<TimeAgo\n        datetime={props.date}\n        opts={{minInterval: 10}}\n      />}\n      </div>\n    </div>\n  </>\n}\n\nexport default Message","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Header/Header.tsx",["129"],"import UserPicture from \"../../../../Components/UserPicture/UserPicture\"\nimport './Header.scss'\nimport {useScreen} from \"../../../../Contexts/ScreenContext\";\n\nconst SidebarHeader = (props: {\n  user: {\n    username: string,\n    picture: string\n  }\n  setOpen: () => void\n}) => {\n  const screen = useScreen()\n  return (<>\n    <div className={'chat_sidebar__header'} onClick={(e: any) => {\n      console.log('click')\n      props.setOpen()\n    }}>\n      <UserPicture username={props.user.username} picture={props.user.picture}/>\n      <span className={'chat_sidebar__header___username'}>{props.user.username}</span> \n    </div>\n    \n  </>)\n}\nexport default SidebarHeader","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/ChatList/ChatList.tsx",[],"/Users/vladdenisov/projects/web/src/Utils/decrypt.ts",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/ChatList/ChatCard.tsx",[],"/Users/vladdenisov/projects/web/src/Components/UserPicture/UserPicture.tsx",[],"/Users/vladdenisov/projects/web/src/Utils/keysUtils.ts",[],"/Users/vladdenisov/projects/web/src/Utils/formatDate.ts",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/MessageInput.tsx",[],"/Users/vladdenisov/projects/web/src/Utils/encrypt.ts",[],"/Users/vladdenisov/projects/web/src/Contexts/UserContext.tsx",[],"/Users/vladdenisov/projects/web/src/Contexts/DialogContext.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/DialogHeader.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Register/Register.tsx",["130"],"import React, {useEffect, useRef, useState} from \"react\";\nimport {Link, Redirect} from \"react-router-dom\";\nimport './Register.scss';\nimport Preloader from \"../../Components/Preloader/Preloader\";\nimport config from '../../config'\nimport { generateKeyPair } from \"../../Utils/keysUtils\";\n\nconst Register: React.FunctionComponent = () => {\n  const [key, setKeys] = useState(generateKeyPair())\n  const [credentials, setCredentials] = useState({\n    username: '',\n    password: ''\n  })\n  const [doesMeetReqs, setMeetReq] = useState(false)\n  const [stage, setStage] = useState(0)\n  const [isSame, setSame] = useState(false)\n  const [isLoading, setLoading] = useState(true)\n  const handleChange = (e: any) => {\n    console.log(e.target.name, e.target.value)\n    if (e.target.name === 'verify_password') {\n        if (e.target.value === credentials.password) {\n          setSame(true)\n        }\n        else {\n          setSame(false)\n        }\n    }\n    else {\n        setCredentials({\n            ...credentials,\n            [e.target.name]: e.target.value\n        })\n        if (e.target.name === 'password') {\n          let pass_regexp = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\\s).{8,31}$/ // 8 to 31 characters which contain at least one lowercase letter, one uppercase letter, one numeric digit, and one special character\n          if (e.target.value.match(pass_regexp)) {\n            setMeetReq(true)\n          }\n          else {\n            setMeetReq(false)\n          }\n        }\n    }\n  }\n  const handleRegister = (credentials: {\n    username?: string,\n    password?: string,\n    key?:string\n  }, stage: number, setStage: any) => {\n    if (!credentials.password || !credentials.username) return\n    if (!isSame) return\n    let pass_regexp = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?!.*\\s).{8,31}$/ // 8 to 31 characters which contain at least one lowercase letter, one uppercase letter, one numeric digit, and one special character\n    if (!credentials.password.match(pass_regexp)) {\n\n\n    }\n    if (stage === 0) {\n        fetch(config.server_url + 'api/register', {\n        method: 'POST',\n        body: JSON.stringify({...credentials, pub_key: key.public_key}),\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        })\n            .then((res) => res.json())\n            .then((res) => {\n            if (res.statusCode !== 200) {\n                alert(res.message)\n            } else {\n                localStorage.setItem('token', res.token)\n                setStage(1)\n            }\n            })\n        }\n        else {\n          if (key.private_key != null) {\n              localStorage.setItem('key', key.private_key)\n              if (localStorage.getItem('key')) setStage(2)\n          }\n        }\n  }\n  const firstStage = () => {\n    return (\n        <>\n          <h1>Cryptash</h1>\n          <input name={'username'} placeholder={'Username'} className={'register_main__form___username'} onChange={(e) => handleChange(e)}/>\n          <input name={'password'} type={'password'} placeholder={'Password'} className={`register_main__form___password ${doesMeetReqs ? '' : 'red-outline'}`} onChange={(e) => handleChange(e)}/>\n          <input name={'verify_password'} type={'password'} placeholder={'Verify Password'} className={`register_main__form___password ${isSame ? '' : 'red-outline'}`} onChange={(e) => handleChange(e)}/>\n          <button type={'submit'} className={'register_main__form___submit'} disabled={!isSame}>Create account</button>\n          <Link to={'/login'}>Back to login</Link>\n        </>\n  )\n  }\n  const keyInput = useRef(null)\n  const secondStage = () => {\n    localStorage.setItem('key', key.private_key)\n    if (stage === 1) return (\n        <>\n          <h3>One more thing</h3>\n          <h4>Please, write down your private key!</h4>\n          <div className={'register_main__form___key-wrapper'}>\n          <input key={key.private_key} name={'key'} type={'text'} defaultValue={key.private_key} className={'register_main__form___key-wrapper'} ref={keyInput}></input>\n          <span className=\"material-icons outlined register_main__form___copy\" onClick={(e) => {\n            if (keyInput.current){\n              //@ts-ignore\n              keyInput.current.select()\n            } \n            document.execCommand(\"copy\")\n          }}>\n            content_copy\n          </span>\n          </div>\n          <button type={'submit'} className={'register_main__form___submit'}>Create account</button>\n        </>\n    )\n    else return <Redirect to={'/'} />\n  }\n  useEffect(() => {\n    if (localStorage.getItem('token')) {\n      fetch(config.server_url + 'api/checkAuth', {\n        method: 'POST',\n        body: JSON.stringify({token: localStorage.getItem('token')}),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n          .then((res) => res.json())\n          .then((res) => {\n            if (res.statusCode === 200) {\n              setLoading(false)\n              setStage(2)\n            }\n          })\n    }\n    else {\n      setLoading(false)\n    }\n  }, [])\n  if (isLoading) return <Preloader />\n  return <>\n    <div className=\"register_main\">\n      <div className={'register_main__header'}>\n          <h1 className={'register_main__header___title'}>Create your account</h1>\n          <h2 className={'register_main__header___undertitle'}>If you already have an account, login using button below</h2>\n      </div>\n      <div className={'register_main__block'}>\n        <form className={'register_main__form'} onSubmit={(e) =>{\n          e.preventDefault()\n          handleRegister(credentials, stage, setStage)\n        }}>\n          {stage ? secondStage() : firstStage()}\n        </form>\n      </div>\n    </div>\n  </>\n\n}\n\nexport default Register\n","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Search/Search.tsx",["131"],"/Users/vladdenisov/projects/web/src/Contexts/SearchReducer.tsx",[],"/Users/vladdenisov/projects/web/src/Contexts/ScreenContext.tsx",[],{"ruleId":"132","severity":1,"message":"133","line":8,"column":31,"nodeType":"134","messageId":"135","endLine":8,"endColumn":35},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":15,"column":6,"nodeType":"142","endLine":15,"endColumn":8,"suggestions":"143"},{"ruleId":"132","severity":1,"message":"144","line":6,"column":10,"nodeType":"134","messageId":"135","endLine":6,"endColumn":16},{"ruleId":"132","severity":1,"message":"145","line":19,"column":9,"nodeType":"134","messageId":"135","endLine":19,"endColumn":13},{"ruleId":"140","severity":1,"message":"146","line":83,"column":6,"nodeType":"142","endLine":83,"endColumn":28,"suggestions":"147"},{"ruleId":"140","severity":1,"message":"148","line":96,"column":5,"nodeType":"142","endLine":96,"endColumn":19,"suggestions":"149"},{"ruleId":"140","severity":1,"message":"150","line":120,"column":6,"nodeType":"142","endLine":120,"endColumn":41,"suggestions":"151"},{"ruleId":"140","severity":1,"message":"152","line":61,"column":6,"nodeType":"142","endLine":61,"endColumn":14,"suggestions":"153"},{"ruleId":"140","severity":1,"message":"154","line":64,"column":6,"nodeType":"142","endLine":64,"endColumn":8,"suggestions":"155"},{"ruleId":"132","severity":1,"message":"156","line":12,"column":9,"nodeType":"134","messageId":"135","endLine":12,"endColumn":15},{"ruleId":"132","severity":1,"message":"157","line":9,"column":15,"nodeType":"134","messageId":"135","endLine":9,"endColumn":22},{"ruleId":"132","severity":1,"message":"158","line":3,"column":10,"nodeType":"134","messageId":"135","endLine":3,"endColumn":17},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["159"],"no-negated-in-lhs",["160"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["161"],"'nanoid' is defined but never used.","'user' is assigned a value but never used.","React Hook useCallback has missing dependencies: 'dialog' and 'params.id'. Either include them or remove the dependency array.",["162"],"React Hook useEffect has a missing dependency: 'props.socket'. Either include it or remove the dependency array.",["163"],"React Hook useEffect has a missing dependency: 'dialog'. Either include it or remove the dependency array.",["164"],"React Hook useEffect has missing dependencies: 'params.id', 'props', and 'scrollCallback'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["165"],"React Hook useEffect has a missing dependency: 'scrollCallback'. Either include it or remove the dependency array.",["166"],"'screen' is assigned a value but never used.","'setKeys' is assigned a value but never used.","'useUser' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},"Update the dependencies array to be: [dispatch]",{"range":"179","text":"180"},"Update the dependencies array to be: [dialog, params.id]",{"range":"181","text":"182"},"Update the dependencies array to be: [dialog.state, props.socket]",{"range":"183","text":"184"},"Update the dependencies array to be: [callback, dialog, params.id, props.socket]",{"range":"185","text":"186"},"Update the dependencies array to be: [isRead, params.id, props, scrollCallback]",{"range":"187","text":"188"},"Update the dependencies array to be: [scrollCallback]",{"range":"189","text":"190"},[531,533],"[dispatch]",[3074,3096],"[dialog, params.id]",[3602,3616],"[dialog.state, props.socket]",[4498,4533],"[callback, dialog, params.id, props.socket]",[1924,1932],"[isRead, params.id, props, scrollCallback]",[1980,1982],"[scrollCallback]"]