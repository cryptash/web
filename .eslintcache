[{"/Users/vladdenisov/projects/web/src/index.tsx":"1","/Users/vladdenisov/projects/web/src/reportWebVitals.ts":"2","/Users/vladdenisov/projects/web/src/App.tsx":"3","/Users/vladdenisov/projects/web/src/Pages/Login/Login.tsx":"4","/Users/vladdenisov/projects/web/src/Pages/Home/Home.tsx":"5","/Users/vladdenisov/projects/web/src/Pages/Chat/Chat.tsx":"6","/Users/vladdenisov/projects/web/src/Components/Preloader/Preloader.tsx":"7","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Sidebar.tsx":"8","/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/Dialog.tsx":"9","/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/Message.tsx":"10","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Header/Header.tsx":"11","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/ChatList/ChatList.tsx":"12","/Users/vladdenisov/projects/web/src/Utils/decrypt.ts":"13","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/ChatList/ChatCard.tsx":"14","/Users/vladdenisov/projects/web/src/Components/UserPicture/UserPicture.tsx":"15","/Users/vladdenisov/projects/web/src/Utils/keysUtils.ts":"16","/Users/vladdenisov/projects/web/src/Utils/formatDate.ts":"17","/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/MessageInput.tsx":"18","/Users/vladdenisov/projects/web/src/Utils/encrypt.ts":"19","/Users/vladdenisov/projects/web/src/Contexts/UserContext.tsx":"20","/Users/vladdenisov/projects/web/src/Contexts/DialogContext.tsx":"21","/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/DialogHeader.tsx":"22","/Users/vladdenisov/projects/web/src/Pages/Register/Register.tsx":"23","/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Search/Search.tsx":"24","/Users/vladdenisov/projects/web/src/Contexts/SearchReducer.tsx":"25","/Users/vladdenisov/projects/web/src/Contexts/ScreenContext.tsx":"26","/Users/vladdenisov/projects/web/src/Typings/Message.d.ts":"27","/Users/vladdenisov/projects/web/src/Logux/store.ts":"28","/Users/vladdenisov/projects/web/src/Logux/connect.ts":"29","/Users/vladdenisov/projects/web/src/Reducers/index.ts":"30","/Users/vladdenisov/projects/web/src/Reducers/UserReducer.ts":"31","/Users/vladdenisov/projects/web/src/Reducers/ChatReducer.ts":"32","/Users/vladdenisov/projects/web/src/config.ts":"33"},{"size":1029,"mtime":1623525170185,"results":"34","hashOfConfig":"35"},{"size":416,"mtime":1623525170186,"results":"36","hashOfConfig":"35"},{"size":592,"mtime":1623525170180,"results":"37","hashOfConfig":"35"},{"size":2865,"mtime":1623525170183,"results":"38","hashOfConfig":"35"},{"size":2013,"mtime":1623525170183,"results":"39","hashOfConfig":"35"},{"size":1074,"mtime":1623525170182,"results":"40","hashOfConfig":"35"},{"size":300,"mtime":1623525170181,"results":"41","hashOfConfig":"35"},{"size":1332,"mtime":1623525170183,"results":"42","hashOfConfig":"35"},{"size":4620,"mtime":1623535609880,"results":"43","hashOfConfig":"35"},{"size":4192,"mtime":1623525170182,"results":"44","hashOfConfig":"35"},{"size":639,"mtime":1623525170183,"results":"45","hashOfConfig":"35"},{"size":1483,"mtime":1623525170182,"results":"46","hashOfConfig":"35"},{"size":984,"mtime":1623525170184,"results":"47","hashOfConfig":"35"},{"size":2850,"mtime":1623525170182,"results":"48","hashOfConfig":"35"},{"size":732,"mtime":1623525170181,"results":"49","hashOfConfig":"35"},{"size":445,"mtime":1623525170184,"results":"50","hashOfConfig":"35"},{"size":1651,"mtime":1623525170184,"results":"51","hashOfConfig":"35"},{"size":2524,"mtime":1623525170182,"results":"52","hashOfConfig":"35"},{"size":724,"mtime":1623525170184,"results":"53","hashOfConfig":"35"},{"size":1912,"mtime":1622234844184,"results":"54","hashOfConfig":"55"},{"size":2464,"mtime":1623525170181,"results":"56","hashOfConfig":"35"},{"size":1149,"mtime":1623536704913,"results":"57","hashOfConfig":"35"},{"size":4656,"mtime":1623525170183,"results":"58","hashOfConfig":"35"},{"size":2062,"mtime":1623525170183,"results":"59","hashOfConfig":"35"},{"size":1870,"mtime":1623525170181,"results":"60","hashOfConfig":"35"},{"size":1370,"mtime":1623525170181,"results":"61","hashOfConfig":"35"},{"size":115,"mtime":1622234752010,"results":"62","hashOfConfig":"55"},{"size":519,"mtime":1623525170181,"results":"63","hashOfConfig":"35"},{"size":956,"mtime":1622234751397,"results":"64","hashOfConfig":"55"},{"size":1783,"mtime":1623525170184,"results":"65","hashOfConfig":"35"},{"size":1365,"mtime":1623525170183,"results":"66","hashOfConfig":"35"},{"size":3029,"mtime":1623571190232,"results":"67","hashOfConfig":"35"},{"size":128,"mtime":1623534161946,"results":"68","hashOfConfig":"35"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},"idnpao",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"72"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"72"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},"1d5vwsx",{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"72"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"/Users/vladdenisov/projects/web/src/index.tsx",["144"],"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { BrowserRouter, Route, Link } from 'react-router-dom'\nimport Login from './Pages/Login/Login'\nimport Home from './Pages/Home/Home'\nimport Register from './Pages/Register/Register'\nimport { ScreenProvider } from './Contexts/ScreenContext'\nReactDOM.render(\n  <React.StrictMode>\n    <ScreenProvider>\n      <BrowserRouter>\n        <App>\n          <Route exact path=\"/login\" component={Login} />\n          <Route exact path=\"/register\" component={Register} />\n          <Route path={['/:id', '/']} exact component={Home} />\n        </App>\n      </BrowserRouter>\n    </ScreenProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n",["145","146"],"/Users/vladdenisov/projects/web/src/reportWebVitals.ts",[],"/Users/vladdenisov/projects/web/src/App.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Login/Login.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Home/Home.tsx",["147"],"import React, { useState, useEffect } from 'react'\nimport { Redirect, useHistory } from 'react-router-dom'\nimport Preloader from '../../Components/Preloader/Preloader'\nimport config from '../../config'\nimport Chat from '../Chat/Chat'\nimport { badge, Client } from '@logux/client'\nimport store from '../../Logux/store'\nimport { badgeStyles } from '@logux/client/badge/styles'\nimport { Provider } from 'react-redux'\nbadge(store.client, {\n  messages: {\n    synchronized: 'Everything is up to date',\n    disconnected: 'No connection to server.',\n    wait: 'Sending...',\n    sending: 'Sending...',\n    error: 'Error occurred. Please, try again!',\n    protocolError: 'Error occurred. Please, contact admins!',\n    syncError: 'Error while syncing...',\n    denied: 'Access denied'\n  },\n  styles: badgeStyles\n})\n\nconst Home = () => {\n  const [isLoggined, setLoginned] = useState(0)\n  const token = localStorage.getItem('token')\n  const history = useHistory()\n  const signOut = () => {\n    history.push('/login')\n    setLoginned(1)\n    localStorage.removeItem('key')\n    localStorage.removeItem('token')\n    localStorage.removeItem('user_id')\n  }\n  // Check if authenticated\n  useEffect(() => {\n    if (localStorage.getItem('token')) {\n      let client = new Client({\n        subprotocol: '1.0.0',\n        server: config.socket_url,\n        userId: 'anonymous'\n      })\n      client.on('add', (action: any) => {\n        if (action.type === 'user/check/done') {\n          store.client.start()\n          setLoginned(2)\n        } else if (action.type === 'logux/undo') {\n          signOut()\n        }\n      })\n      client.start()\n      client.log.add(\n        { type: 'user/check', token: localStorage.getItem('token') },\n        { sync: true }\n      )\n    } else {\n      signOut()\n    }\n  }, [token])\n\n  if (isLoggined === 0) {\n    return <Preloader />\n  }\n\n  if (isLoggined === 1) {\n    return <Redirect to={'/login'} />\n  }\n  return (\n    <Provider store={store}>\n      <Chat />\n    </Provider>\n  )\n}\n\nexport default Home\n","/Users/vladdenisov/projects/web/src/Pages/Chat/Chat.tsx",[],"/Users/vladdenisov/projects/web/src/Components/Preloader/Preloader.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Sidebar.tsx",["148"],"import SidebarHeader from './Header/Header'\nimport './Sidebar.scss'\nimport ChatList from './ChatList/ChatList'\nimport SidebarSearch from './Search/Search'\nimport { SearchProvider } from '../../../Contexts/SearchReducer'\nimport { useScreen } from '../../../Contexts/ScreenContext'\nimport { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from '../../../Reducers'\n\nconst Sidebar = () => {\n  const screen = useScreen()\n  const user = useSelector((state: RootState) => state.userReducer)\n  const [isOpened, setOpen] = useState(screen.state.width > 900)\n  const [isOpenedByUser, setOpenedByUser] = useState(false)\n  useEffect(() => {\n    if (!isOpenedByUser) setOpen(window.innerWidth > 900)\n  }, [screen.state.width])\n  return (\n    <>\n      <SearchProvider>\n        <div className={`chat_sidebar ${isOpened ? 'opened' : 'closed'}`}>\n          <SidebarHeader\n            user={{ username: user.username, picture: user.picture }}\n            setOpen={() => {\n              setOpen(!isOpened)\n              setOpenedByUser(!isOpenedByUser)\n            }}\n          />\n          <SidebarSearch\n            isOpened={isOpened}\n            setOpened={(_: boolean) => setOpen(_)}\n          />\n          <ChatList />\n        </div>\n      </SearchProvider>\n    </>\n  )\n}\nexport default Sidebar\n","/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/Dialog.tsx",["149"],"import { FunctionComponent, useEffect, useMemo, useRef, useState } from 'react'\nimport Preloader from '../../../Components/Preloader/Preloader'\nimport './Dialog.scss'\nimport MessageInput from './MessageInput'\nimport { useParams } from 'react-router'\nimport DialogHeader from './DialogHeader'\nimport { useDispatch, useSubscription } from '@logux/redux'\nimport { connect, useSelector } from 'react-redux'\nimport {\n  changeChat,\n  getMessages,\n  RootState,\n  setChatId\n} from '../../../Reducers'\nimport Message from './Message'\nimport * as MessageTyping from '../../../Typings/Message'\nconst Dialog: FunctionComponent<{\n  chat_id: string\n  messages: MessageTyping.Message[]\n  pub_key: string\n  status: string\n  username: string\n  picture: string\n}> = (props) => {\n  let params: { id: string } = useParams()\n  const dispatch = useDispatch()\n  const page = useRef(0)\n  const prevScrollHeight = useRef(0)\n  const [isRequested, setRequested] = useState(false)\n  const isSubscribing = useSubscription(\n    props.chat_id ? [`chat/${props.chat_id}`] : []\n  )\n  let chat = useSelector((state: RootState) => state.chatReducer)\n  const messagesDiv = useRef<HTMLDivElement>(null)\n  const callbacks = useRef<Array<Function>>([])\n\n  const subscribeToScroll = (callback: Function) => {\n    callbacks.current.push(callback)\n    return () => callbacks.current.filter((x) => x !== callback)\n  }\n\n  useEffect(() => {\n    dispatch(setChatId({ id: params.id }))\n  }, [dispatch, params.id])\n\n  useEffect(() => {\n    dispatch(changeChat({ id: params.id }))\n  }, [dispatch, params.id])\n\n  const scrollCallback = (e: any) => {\n    callbacks.current.forEach((callback) => {\n      callback(e)\n    })\n    if (e.target.scrollTop === 0) {\n      if (!isRequested) {\n        page.current = page.current + 1\n        prevScrollHeight.current = messagesDiv.current\n          ? messagesDiv.current.scrollHeight\n          : 0\n        setRequested(true)\n        dispatch\n          .sync(getMessages({ pg: page.current, chat_id: params.id }))\n          .then(() => setRequested(false))\n      }\n    }\n  }\n\n  const mes = useMemo(() => {\n    const msgComp: Array<JSX.Element> = []\n    props.messages.forEach(\n      (m: {\n        content: string\n        fromMe: boolean\n        date: Date\n        read: boolean\n        message_id: string\n      }) => {\n        return msgComp.push(\n          <Message\n            id={m.message_id}\n            subscribeToScroll={(c: Function) => subscribeToScroll(c)}\n            isRead={m.read}\n            content={m.content}\n            pub_key={props.pub_key}\n            key={m.message_id}\n            fromMe={m.fromMe}\n            date={m.date}\n          />\n        )\n      }\n    )\n    return msgComp\n  }, [props.messages, props.pub_key])\n\n  const scrollDown = () => {\n    if (\n      messagesDiv.current &&\n      messagesDiv.current.scrollTop <\n        messagesDiv.current.scrollHeight - 300 - window.innerHeight\n    )\n      messagesDiv.current?.scrollTo(0, messagesDiv.current?.scrollHeight)\n    prevScrollHeight.current = 0\n  }\n  useEffect(() => {\n    if (messagesDiv.current && page.current === 0) {\n      if (\n        messagesDiv.current.scrollTop <\n        messagesDiv.current.scrollHeight - 300 - window.innerHeight\n      )\n        messagesDiv.current.scrollTo(0, messagesDiv.current.scrollHeight)\n    } else if (messagesDiv.current) {\n      if (\n        messagesDiv.current.scrollTop <\n        messagesDiv.current.scrollHeight - 300 - window.innerHeight\n      )\n        messagesDiv.current.scrollTo(\n          0,\n          messagesDiv.current.scrollHeight - prevScrollHeight.current\n        )\n    }\n  }, [isSubscribing, messagesDiv.current?.scrollHeight])\n  if (!params.id) {\n    return <div>No chat!</div>\n  }\n  if (isSubscribing)\n    return (\n      <div className={'preloader'}>\n        <Preloader />\n      </div>\n    )\n  return (\n    <>\n      <div className={'chat_dialog'}>\n        <DialogHeader username={props.username} picture={props.picture} status={props.status}/>\n        <div\n          className={'chat_dialog__messages'}\n          onScroll={(e) => scrollCallback(e)}\n          ref={messagesDiv}\n        >\n          {mes}\n        </div>\n        <MessageInput scrollDown={() => scrollDown()} />\n      </div>\n    </>\n  )\n}\nexport default connect(\n  (state: RootState, ownProps) => {\n    return {\n      chat_id: state.chatReducer.chat_id,\n      messages: [...state.chatReducer.messages],\n      pub_key: state.chatReducer.pub_key,\n      status: state.chatReducer.status,\n      username: state.chatReducer.username,\n      picture: state.chatReducer.picture\n    }\n  },\n  (dispatch) => {\n    return {}\n  }\n)(Dialog)\n","/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/Message.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Header/Header.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/ChatList/ChatList.tsx",[],"/Users/vladdenisov/projects/web/src/Utils/decrypt.ts",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/ChatList/ChatCard.tsx",["150","151"],"import { FunctionComponent, useEffect, useMemo } from 'react'\nimport TimeAgo from 'timeago-react'\nimport UserPicture from '../../../../Components/UserPicture/UserPicture'\nimport { ChatResponse } from '../../../../Typings/ChatReponse'\nimport { decryptMessage } from '../../../../Utils/decrypt'\nimport { formatTime } from '../../../../Utils/formatDate'\nimport { useHistory } from 'react-router-dom'\nimport { useDispatch } from '@logux/redux'\nimport { createChat } from '../../../../Reducers'\nimport store from '../../../../Logux/store'\nimport { useParams } from 'react-router'\n\nconst ChatCard: FunctionComponent<{ chat: ChatResponse }> = (props) => {\n  const { chat } = props\n  let history = useHistory()\n  const dispatch = useDispatch()\n  const params: {\n    id: string\n  } = useParams()\n  useEffect(() => {\n    store.client.log.type(\n      'chat/create/done',\n      (\n        action: {\n          type: 'chat/create/done'\n          payload: {\n            chat_id: string\n          }\n        },\n        _\n      ) => {\n        history.push(`/${action.payload.chat_id}`)\n      }\n    )\n  }, [history])\n  const text = useMemo(() => {\n    if (chat.messages[0]) {\n      try {\n        return decryptMessage(\n          localStorage.getItem('key'),\n          chat.messages[0].content,\n          chat.user.pub_key\n        ).text\n      } catch (e) {\n        return ''\n      }\n    }\n    return ''\n  }, [chat.messages[0], chat.user.pub_key])\n  const handleClick = (_: any) => {\n    if (!chat.chat_id) {\n      dispatch.sync(createChat({ user_id: chat.user.user_id }))\n    } else {\n      history.push(`/${chat.chat_id}`)\n    }\n  }\n  return (\n    <>\n      <div\n        className={`chat_list__card ${\n          params.id === props.chat.chat_id ? 'active' : ''\n        }`}\n        onClick={(e) => handleClick(e)}\n      >\n        <UserPicture\n          username={chat.user.username}\n          picture={chat.user.picture}\n        />\n        <div className={'right'}>\n          <div className={'chat_list__card___top'}>\n            <span className={'chat_list__card___top____username'}>\n              {chat.user.username}\n            </span>\n            <span className={'chat_list__card___top____date'}>\n              {chat.messages[0] && chat.messageAt ? (\n                formatTime(chat.messageAt) ? (\n                  formatTime(chat.messageAt)\n                ) : (\n                  <TimeAgo\n                    datetime={chat.messageAt}\n                    opts={{ minInterval: 5 }}\n                  />\n                )\n              ) : (\n                ''\n              )}\n            </span>\n          </div>\n          <div className={'chat_list__card___bottom'}>\n            <span className={'chat_list__card___bottom____content'}>\n              {text}\n            </span>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default ChatCard\n","/Users/vladdenisov/projects/web/src/Components/UserPicture/UserPicture.tsx",[],"/Users/vladdenisov/projects/web/src/Utils/keysUtils.ts",[],"/Users/vladdenisov/projects/web/src/Utils/formatDate.ts",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/MessageInput.tsx",[],"/Users/vladdenisov/projects/web/src/Utils/encrypt.ts",[],"/Users/vladdenisov/projects/web/src/Contexts/UserContext.tsx",[],["152","153"],"/Users/vladdenisov/projects/web/src/Contexts/DialogContext.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Dialog/DialogHeader.tsx",["154"],"import UserPicture from '../../../Components/UserPicture/UserPicture'\nimport { FunctionComponent } from 'react'\nimport './DialogHeader.scss'\n\nconst DialogHeader: FunctionComponent<{\n  username: string\n  picture: string\n  status: string\n}> = (props) => {\n  const generateStatus = () => {\n    switch (props.status) {\n      case 'OFFLINE': {\n        return <>\n          <div className={'oval grey'}></div>\n          <span>Offline</span>\n        </>\n        break\n      }\n      case 'ONLINE': {\n        return <>\n          <div className={'oval green'}></div>\n          <span>Online</span>\n        </>\n      }\n    }\n  }\n  return (\n    <>\n      <div className={'chat_dialog__header'}>\n        <section className={'chat_dialog__header___picture'}>\n          <UserPicture picture={props.picture} username={props.username} />\n        </section>\n        <section className={'chat_dialog__header___info'}>\n          <span className={'chat_dialog__header___info-username'}>{props.username}</span>\n          <div className={'chat_dialog__header___info-status'}>{generateStatus()}</div>\n        </section>\n      </div>\n    </>\n  )\n}\n\nexport default DialogHeader\n","/Users/vladdenisov/projects/web/src/Pages/Register/Register.tsx",[],"/Users/vladdenisov/projects/web/src/Pages/Chat/Sidebar/Search/Search.tsx",[],"/Users/vladdenisov/projects/web/src/Contexts/SearchReducer.tsx",[],"/Users/vladdenisov/projects/web/src/Contexts/ScreenContext.tsx",[],"/Users/vladdenisov/projects/web/src/Typings/Message.d.ts",[],"/Users/vladdenisov/projects/web/src/Logux/store.ts",[],"/Users/vladdenisov/projects/web/src/Logux/connect.ts",[],"/Users/vladdenisov/projects/web/src/Reducers/index.ts",["155"],"import { userReducer } from './UserReducer'\n\nimport { combineReducers } from 'redux'\nimport actionCreatorFactory from 'typescript-fsa'\nimport { chatReducer } from './ChatReducer'\n\nconst actionCreator = actionCreatorFactory()\n\nexport const changeChat = actionCreator<{ id: string }>('chat/change')\nexport type changeChatAction = ReturnType<typeof changeChat>\nexport const setChatId = actionCreator<{ id: string }>('chat/set_id')\nexport type setChatIdAction = ReturnType<typeof setChatId>\n\nexport const getMessages =\n  actionCreator<{ pg: number; chat_id: string }>('chat/messages/get')\nexport type getMessagesAction = ReturnType<typeof getMessages>\n\nexport const setMessageRead =\n  actionCreator<{ message_id: string; chat_id: string }>('chat/message/read')\nexport type setMessageReadAction = ReturnType<typeof setMessageRead>\n\nexport const searchUsers = actionCreator<{ query: string }>('users/search')\nexport type searchUsersAction = ReturnType<typeof searchUsers>\n\nexport const createChat = actionCreator<{ user_id: string }>('chat/create')\nexport type createChatAction = ReturnType<typeof createChat>\n\nexport const sendMessage =\n  actionCreator<{\n    content: string\n    from: string | null\n    chat_id: string\n  }>('chat/messages/send')\nexport type sendMessageAction = ReturnType<typeof sendMessage>\n\nexport type SubscribeAction = { type: 'logux/subscribe'; channel: string }\nexport const subscribe = (channel: string): SubscribeAction => ({\n  type: 'logux/subscribe',\n  channel\n})\n\ntype Actions =\n  | changeChatAction\n  | SubscribeAction\n  | getMessagesAction\n  | setChatIdAction\n  | sendMessageAction\n  | searchUsersAction\n\nconst rootReducer = combineReducers({\n  userReducer,\n  chatReducer\n})\n\nexport default rootReducer\nexport type RootState = ReturnType<typeof rootReducer>\n","/Users/vladdenisov/projects/web/src/Reducers/UserReducer.ts",[],"/Users/vladdenisov/projects/web/src/Reducers/ChatReducer.ts",[],"/Users/vladdenisov/projects/web/src/config.ts",[],{"ruleId":"156","severity":1,"message":"157","line":6,"column":32,"nodeType":"158","messageId":"159","endLine":6,"endColumn":36},{"ruleId":"160","replacedBy":"161"},{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","severity":1,"message":"165","line":59,"column":6,"nodeType":"166","endLine":59,"endColumn":13,"suggestions":"167"},{"ruleId":"164","severity":1,"message":"168","line":18,"column":6,"nodeType":"166","endLine":18,"endColumn":26,"suggestions":"169"},{"ruleId":"156","severity":1,"message":"170","line":33,"column":7,"nodeType":"158","messageId":"159","endLine":33,"endColumn":11},{"ruleId":"164","severity":1,"message":"171","line":49,"column":6,"nodeType":"166","endLine":49,"endColumn":43,"suggestions":"172"},{"ruleId":"164","severity":1,"message":"173","line":49,"column":7,"nodeType":"174","endLine":49,"endColumn":23},{"ruleId":"160","replacedBy":"175"},{"ruleId":"162","replacedBy":"176"},{"ruleId":"177","severity":1,"message":"178","line":17,"column":9,"nodeType":"179","messageId":"180","endLine":17,"endColumn":14},{"ruleId":"156","severity":1,"message":"181","line":42,"column":6,"nodeType":"158","messageId":"159","endLine":42,"endColumn":13},"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-native-reassign",["182"],"no-negated-in-lhs",["183"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'signOut'. Either include it or remove the dependency array.","ArrayExpression",["184"],"React Hook useEffect has a missing dependency: 'isOpenedByUser'. Either include it or remove the dependency array.",["185"],"'chat' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'chat.messages'. Either include it or remove the dependency array.",["186"],"React Hook useMemo has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","MemberExpression",["182"],["183"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'Actions' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},"Update the dependencies array to be: [signOut, token]",{"range":"193","text":"194"},"Update the dependencies array to be: [isOpenedByUser, screen.state.width]",{"range":"195","text":"196"},"Update the dependencies array to be: [chat.messages, chat.user.pub_key]",{"range":"197","text":"198"},[1781,1788],"[signOut, token]",[742,762],"[isOpenedByUser, screen.state.width]",[1388,1425],"[chat.messages, chat.user.pub_key]"]